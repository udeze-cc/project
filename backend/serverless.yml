# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: account-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

custom:
  account_table_name: "${self:service}-${self:provider.stage}-accounts-table"
  create_account_schema_name: "${self:provider.stage}CreateAccountSchema"
  qldb_name: "elive-${self:provider.stage}-qldb"

provider:
  name: aws
  runtime: nodejs16.x

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: eu-west-2

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - qldb:SendCommand
          Resource: "*"
        - Effect: "Allow"
          Action:
            - qldb:PartiQLInsert
            - qldb:PartiQLUpdate
            - qldb:PartiQLSelect
            - qldb:PartiQLCreateTable
            - qldb:PartiQLCreateIndex
          Resource: "*"

#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
  environment:
    REGION: ${self:provider.region}
    DB_TABLE: ${self:custom.account_table_name}
    LEDGER_NAME: ${self:custom.qldb_name}

# api gateway request global schema
  apiGateway:
    apiKeys:
      - web-frontend-${self:provider.stage}-key
    request:
      schemas:
        create-account-api-schema:
          name: ${self:custom.create_account_schema_name}
          description: "A model validation schema for create and update account API"
          schema: ${file(./src/create.account.json)}

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  CreateAccount:
    handler: handler.create
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /accounts/create
          method: post
          request:
            schemas:
              application/json: create-account-api-schema  
  ReadAccount:
    handler: handler.read
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /account/{email}
          method: get
          private: false
          request:
            parameters:
              paths:
                email: true

  ReadAccounts:
    handler: handler.readAll
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /accounts
          method: get


  UpdateAccount:
    handler: handler.updateAccount
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /account/update/{admin}
          cors: true
          method: put

  CreateDocument:
    handler: qldb.createDocument
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /create/document/{tableName}
          cors: true
          method: post

  CreateTable:
    handler: qldb.createTable
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /create/table/{admin}
          cors: true
          method: post

  CreateIndex:
    handler: qldb.createIndex
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /create/index/{admin}
          cors: true
          method: post

  FetchElectionData:
    handler: qldb.fetchAllElectionData
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /fetch/document/{table}
          cors: true
          method: get



#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    AccountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.account_table_name}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST
    
    QLDBLedger:
      Type: AWS::QLDB::Ledger
      Properties:
        DeletionProtection: true
        Name: ${self:custom.qldb_name}
        PermissionsMode: STANDARD
        Tags:
          - Key: "Domain"
            Value: ${self:provider.stage}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
